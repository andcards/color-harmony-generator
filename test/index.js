import 'jsdom-global/register';
import { expect } from 'chai';
import getGeneratedScheme, { HarmonyTypes } from '../src';

describe('fullScheme', () => {
  it('"#e56500" color with "analogous" harmony', () => {
    expect(getGeneratedScheme('#e56500', HarmonyTypes.ANALOGOUS)).to.deep.equal([
      'hsl(26, 100%, 45%)',
      'hsl(26, 100%, 55%)',
      'hsl(30, 100%, 60%)',
      'hsl(30, 100%, 50%)',
      'hsl(30, 90%, 50%)',
      'hsl(30, 100%, 50%)',
      'hsl(2, 100%, 45%)',
      'hsl(2, 100%, 55%)',
      'hsl(3, 100%, 60%)',
      'hsl(3, 100%, 50%)',
      'hsl(3, 90%, 50%)',
      'hsl(3, 100%, 50%)',
      'hsl(14, 100%, 45%)',
      'hsl(14, 100%, 55%)',
      'hsl(16, 100%, 60%)',
      'hsl(16, 100%, 50%)',
      'hsl(16, 90%, 50%)',
      'hsl(16, 100%, 50%)',
      'hsl(26, 100%, 45%)',
      'hsl(26, 100%, 55%)',
      'hsl(30, 100%, 60%)',
      'hsl(30, 100%, 50%)',
      'hsl(30, 90%, 50%)',
      'hsl(30, 100%, 50%)',
      'hsl(38, 100%, 45%)',
      'hsl(38, 100%, 55%)',
      'hsl(43, 100%, 60%)',
      'hsl(43, 100%, 50%)',
      'hsl(43, 90%, 50%)',
      'hsl(43, 100%, 50%)',
      'hsl(50, 100%, 45%)',
      'hsl(50, 100%, 55%)',
      'hsl(57, 100%, 60%)',
      'hsl(57, 100%, 50%)',
      'hsl(57, 90%, 50%)',
      'hsl(57, 100%, 50%)',
    ]);
  });
  it('"#e56500" color with "monochromatic" harmony', () => {
    expect(getGeneratedScheme('#e56500', HarmonyTypes.MONOCHROMATIC)).to.deep.equal([
      'hsl(26, 100%, 45%)',
      'hsl(26, 100%, 55%)',
      'hsl(30, 100%, 60%)',
      'hsl(30, 100%, 50%)',
      'hsl(30, 90%, 50%)',
      'hsl(30, 100%, 50%)',
      'hsl(26, 100%, 3%)',
      'hsl(26, 100%, 13%)',
      'hsl(26, 57%, 23%)',
      'hsl(26, 57%, 13%)',
      'hsl(26, 47%, 13%)',
      'hsl(26, 57%, 13%)',
      'hsl(26, 100%, 12%)',
      'hsl(26, 100%, 22%)',
      'hsl(26, 68%, 32%)',
      'hsl(26, 68%, 22%)',
      'hsl(26, 58%, 22%)',
      'hsl(26, 68%, 22%)',
      'hsl(26, 100%, 20%)',
      'hsl(26, 100%, 30%)',
      'hsl(26, 75%, 40%)',
      'hsl(26, 75%, 30%)',
      'hsl(26, 65%, 30%)',
      'hsl(26, 75%, 30%)',
      'hsl(26, 100%, 28%)',
      'hsl(26, 100%, 38%)',
      'hsl(26, 79%, 48%)',
      'hsl(26, 79%, 38%)',
      'hsl(26, 69%, 38%)',
      'hsl(26, 79%, 38%)',
      'hsl(26, 100%, 37%)',
      'hsl(26, 100%, 47%)',
      'hsl(27, 100%, 55%)',
      'hsl(27, 100%, 45%)',
      'hsl(27, 90%, 45%)',
      'hsl(27, 100%, 45%)',
    ]);
  });
  it('"#e56500" color with "splitcomplement" harmony', () => {
    expect(getGeneratedScheme('#e56500', HarmonyTypes.SPLIT_COMPLEMENT)).to.deep.equal([
      'hsl(26, 100%, 45%)',
      'hsl(26, 100%, 55%)',
      'hsl(30, 100%, 60%)',
      'hsl(30, 100%, 50%)',
      'hsl(30, 90%, 50%)',
      'hsl(30, 100%, 50%)',
      'hsl(98, 100%, 45%)',
      'hsl(98, 100%, 55%)',
      'hsl(96, 100%, 60%)',
      'hsl(96, 100%, 50%)',
      'hsl(96, 90%, 50%)',
      'hsl(96, 100%, 50%)',
      'hsl(242, 100%, 45%)',
      'hsl(242, 100%, 55%)',
      'hsl(243, 100%, 60%)',
      'hsl(243, 100%, 50%)',
      'hsl(243, 90%, 50%)',
      'hsl(243, 100%, 50%)',
    ]);
  });
  it('"#e56500" color with "tetrad" harmony', () => {
    expect(getGeneratedScheme('#e56500', HarmonyTypes.TETRAD)).to.deep.equal([
      'hsl(26, 100%, 45%)',
      'hsl(26, 100%, 55%)',
      'hsl(30, 100%, 60%)',
      'hsl(30, 100%, 50%)',
      'hsl(30, 90%, 50%)',
      'hsl(30, 100%, 50%)',
      'hsl(116, 100%, 45%)',
      'hsl(116, 100%, 55%)',
      'hsl(116, 100%, 60%)',
      'hsl(116, 100%, 50%)',
      'hsl(116, 90%, 50%)',
      'hsl(116, 100%, 50%)',
      'hsl(206, 100%, 45%)',
      'hsl(206, 100%, 55%)',
      'hsl(202, 100%, 60%)',
      'hsl(202, 100%, 50%)',
      'hsl(202, 90%, 50%)',
      'hsl(202, 100%, 50%)',
      'hsl(296, 100%, 45%)',
      'hsl(296, 100%, 55%)',
      'hsl(300, 100%, 60%)',
      'hsl(300, 100%, 50%)',
      'hsl(300, 90%, 50%)',
      'hsl(300, 100%, 50%)',
    ]);
  });
  it('"#e56500" color with "triad" harmony', () => {
    expect(getGeneratedScheme('#e56500', HarmonyTypes.TRIAD)).to.deep.equal([
      'hsl(26, 100%, 45%)',
      'hsl(26, 100%, 55%)',
      'hsl(30, 100%, 60%)',
      'hsl(30, 100%, 50%)',
      'hsl(30, 90%, 50%)',
      'hsl(30, 100%, 50%)',
      'hsl(146, 100%, 45%)',
      'hsl(146, 100%, 55%)',
      'hsl(150, 100%, 60%)',
      'hsl(150, 100%, 50%)',
      'hsl(150, 90%, 50%)',
      'hsl(150, 100%, 50%)',
      'hsl(266, 100%, 45%)',
      'hsl(266, 100%, 55%)',
      'hsl(270, 100%, 60%)',
      'hsl(270, 100%, 50%)',
      'hsl(270, 90%, 50%)',
      'hsl(270, 100%, 50%)',
    ]);
  });
  it('"#e56500" color with undefined harmony', () => {
    expect(getGeneratedScheme('#e56500', undefined)).to.deep.equal(undefined);
  });
});
